# -*- coding: utf-8 -*-
"""KNAPSACK

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fBEjB09IDBvLHk9yjtuQ9zVTdADrENa4

# **KNAPSACK PROBLEM**
"""

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'unboundedKnapsack' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER k
#  2. INTEGER_ARRAY arr
#

def unboundedKnapsack(k, arr):
    # Initialize a list to store the maximum sum possible for each value from 0 to k
    dp = [0] * (k + 1)

    # For each possible sum from 1 to k, iterate through the array arr
    for i in range(1, k + 1):
        for num in arr:
            if num <= i:
                # Update dp[i] to be the maximum of its current value and the value obtained by adding num to the maximum sum possible for i - num
                dp[i] = max(dp[i], dp[i - num] + num)

    # Return the value at dp[k] which will be the maximum sum closest to but not exceeding k
    return dp[k]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    t = int(input().strip())

    for _ in range(t):
        first_multiple_input = input().rstrip().split()

        n = int(first_multiple_input[0])
        k = int(first_multiple_input[1])

        arr = list(map(int, input().rstrip().split()))

        result = unboundedKnapsack(k, arr)

        fptr.write(str(result) + '\n')

    fptr.close()